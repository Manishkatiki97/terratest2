version: 2.1

commands:
 
  run-tempconverter:
    description: "Deploy temp converter code"
    steps:      
      - run:
          name: Deploy temp converter code.
          command: |
            export AWS_ACCESS_KEY_ID=$(env | awk -F= "/^AWS_ACCESS_KEY_ID=/ {print \$2}")
            export AWS_SECRET_ACCESS_KEY=$(env | awk -F= "/^AWS_SECRET_ACCESS_KEY=/ {print \$2}")
            aws s3 rm s3://temp-converter-test/app --recursive
            aws s3 sync . s3://temp-converter-test/app
            sleep 10
            aws autoscaling update-auto-scaling-group --auto-scaling-group-name temp-convert-asg --max-size 2 --region us-east-1
            aws autoscaling set-desired-capacity --auto-scaling-group-name temp-convert-asg --desired-capacity 2 --region us-east-1
            sleep 60
            aws autoscaling update-auto-scaling-group --auto-scaling-group-name temp-convert-asg --max-size 1 --region us-east-1
            aws autoscaling set-desired-capacity --auto-scaling-group-name temp-convert-asg --desired-capacity 1  --region us-east-1
   terraform-initialization:
    description: "terraform init"
    steps:      
      - run:
          name: Deploy temp converter code.
          command: |
            export AWS_ACCESS_KEY_ID=$(env | awk -F= "/^AWS_ACCESS_KEY_ID=/ {print \$2}")
            export AWS_SECRET_ACCESS_KEY=$(env | awk -F= "/^AWS_SECRET_ACCESS_KEY=/ {print \$2}")
            terraform init
    terraform-plan:
    description: "terraform init"
    steps:      
      - run:
          name: Deploy temp converter code.
          command: |
            export AWS_ACCESS_KEY_ID=$(env | awk -F= "/^AWS_ACCESS_KEY_ID=/ {print \$2}")
            export AWS_SECRET_ACCESS_KEY=$(env | awk -F= "/^AWS_SECRET_ACCESS_KEY=/ {print \$2}")
            terraform plan
     terraform-est:
    description: "terraform init"
    steps:      
      - run:
          name: Deploy temp converter code.
          command: |
            export AWS_ACCESS_KEY_ID=$(env | awk -F= "/^AWS_ACCESS_KEY_ID=/ {print \$2}")
            export AWS_SECRET_ACCESS_KEY=$(env | awk -F= "/^AWS_SECRET_ACCESS_KEY=/ {print \$2}")
            go terraform test
      terraform-apply

jobs:  
  build:
    docker:
      - image: shiftleft/sast-scan
        environment:
          GITHUB_TOKEN: $GITHUB_TOKEN
    working_directory: ~/repo
    steps:
      - checkout
      - run:
          name: Perform ShiftLeft Scan
          command: |
            scan --build
      - store_artifacts:
          path: reports
          destination: sast-scan-reports
  temp-apply:
    docker:
      - image: partha2019/tek-aws-cli